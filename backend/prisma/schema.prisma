// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ThreadRole {
  AI
  USER
}

enum AiChatRole {
  AI
  USER
}

enum UserRole {
  ADMIN
  USER
}

enum UserGender {
  MALE
  FEMALE
}

enum UserMood {
  HAPPY
  OK
  SAD
  WORRIED
  ANGRY
}

enum MindfulSessionType {
  BREATHE
  FOCUS
  RELAXING
  SLEEPING
}

model User {
  // data wajib
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  email_verified_at DateTime?
  username          String    @unique
  password          String

  // data sampingan general
  phone_number String?
  bio          String?     @db.LongText
  gender       UserGender?

  // data sampingan alamat
  street   String?
  province String?
  postal   String?
  country  String?

  // data relasi
  role                   UserRole             @default(USER)
  ai_conversations       AiConversation[]
  threads                Thread[]
  thread_comments        ThreadComment[]
  thread_comment_replies ThreadCommentReply[]
  verification_tokens    VerificationToken[]
  todos                  Todos[]
  created_at             DateTime             @default(now())
  MoodSubmission         MoodSubmission[]
  MindfulSessions        MindfulSessions[]
}

model MoodSubmission {
  id         Int      @id @default(autoincrement())
  owner      User     @relation(fields: [owner_id], references: [id])
  owner_id   Int
  mood       UserMood
  created_at DateTime @default(now())
}

model Todos {
  id           Int      @id @default(autoincrement())
  owner        User     @relation(fields: [owner_id], references: [id])
  owner_id     Int
  title        String
  is_completed Boolean  @default(false)
  created_at   DateTime @default(now())
}

model MindfulSessions {
  id         Int                @id @default(autoincrement())
  owner      User               @relation(fields: [owner_id], references: [id])
  owner_id   Int
  type       MindfulSessionType
  created_at DateTime           @default(now())
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
}

model AiConversation {
  id         Int      @id @default(autoincrement())
  title      String
  owner      User     @relation(fields: [owner_id], references: [id])
  owner_id   Int
  ai_chat    AiChat[]
  created_at DateTime @default(now())
}

model AiChat {
  id                 Int            @id @default(autoincrement())
  role               AiChatRole     @default(USER)
  body               String         @db.LongText
  ai_conversation    AiConversation @relation(fields: [ai_conversation_id], references: [id])
  ai_conversation_id Int
  created_at         DateTime       @default(now())
}

model Thread {
  id              Int             @id @default(autoincrement())
  owner           User            @relation(fields: [owner_id], references: [id])
  owner_id        Int
  title           String
  body            String          @db.LongText
  thread_comments ThreadComment[]
  created_at      DateTime        @default(now())
}

model ThreadComment {
  id                     Int                  @id @default(autoincrement())
  owner                  User                 @relation(fields: [owner_id], references: [id])
  owner_id               Int
  thread                 Thread               @relation(fields: [thread_id], references: [id])
  thread_id              Int
  body                   String               @db.Text
  role                   ThreadRole           @default(USER)
  thread_comment_replies ThreadCommentReply[]
  created_at             DateTime             @default(now())
}

model ThreadCommentReply {
  id         Int           @id @default(autoincrement())
  owner      User          @relation(fields: [owner_id], references: [id])
  owner_id   Int
  comment    ThreadComment @relation(fields: [comment_id], references: [id])
  comment_id Int
  body       String        @db.Text
  created_at DateTime      @default(now())
}
